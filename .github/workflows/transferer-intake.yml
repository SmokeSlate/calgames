name: Capture transferer metadata

on:
  pull_request_target:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  annotate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const body = pr.body || '';
            const match = body.match(/Transferer\s*:\s*(@?[^\s]+)/i);

            const skipPreviewLabel = 'skip-preview';
            const transferLabel = 'transfer-submission';
            const labelsToEnsure = [
              { name: skipPreviewLabel, color: '6b7280', description: 'Skip Firebase preview deployments for intake PRs' },
              { name: transferLabel, color: '0ea5e9', description: 'Created via the public game submission form' }
            ];

            async function ensureLabel(label) {
              try {
                await github.rest.issues.getLabel({ owner, repo, name: label.name });
              } catch (error) {
                if (error.status === 404) {
                  await github.rest.issues.createLabel({
                    owner,
                    repo,
                    name: label.name,
                    color: label.color,
                    description: label.description
                  });
                } else {
                  throw error;
                }
              }
            }

            for (const label of labelsToEnsure) {
              await ensureLabel(label);
            }

            if (!match) {
              core.info('No transferer line found in PR body. Skipping label/comment updates.');
              return;
            }

            const rawTransferer = match[1].trim();
            const trimmedTransferer = rawTransferer.replace(/[\s,.;)\]]+$/g, '');
            const normalizedTransferer = trimmedTransferer.replace(/^@+/, '');
            if (!normalizedTransferer) {
              core.warning('Transferer information could not be normalized. Using placeholder.');
            }
            const sanitizedTransferer = normalizedTransferer ? `@${normalizedTransferer}` : '@unknown';

            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pr.number,
              labels: [skipPreviewLabel, transferLabel]
            });

            const marker = '<!-- transferer-comment -->';
            const commentBody = `${marker}\nTransfer request submitted by ${sanitizedTransferer}. Firebase preview deployments are disabled for this PR.`;

            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: pr.number,
              per_page: 100
            });

            const existing = comments.find(comment => comment.body && comment.body.includes(marker));

            if (existing) {
              if (existing.body !== commentBody) {
                await github.rest.issues.updateComment({
                  owner,
                  repo,
                  comment_id: existing.id,
                  body: commentBody
                });
              }
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr.number,
                body: commentBody
              });
            }

            core.summary.addHeading('Transferer captured', 3);
            core.summary.addRaw(`Detected transferer ${sanitizedTransferer}. Labels applied: \`${skipPreviewLabel}\`, \`${transferLabel}\`.`);
            await core.summary.write();
